<?php      class ControllerCheckoutRecalculate extends Controller {public function index() {$json = array();$this->load->library('user');$this->load->language('checkout/recalculate');$this->user = new User($this->registry);
if ($this->checkLicense()) {if ($this->user->isLogged() && $this->user->hasPermission('modify', 'sale/orderpro')) {$this->cart->clear();$this->customer->logout();
unset($this->session->data['shipping_method']);unset($this->session->data['shipping_methods']);unset($this->session->data['payment_method']);unset($this->session->data['payment_methods']);unset($this->session->data['coupon']);unset($this->session->data['reward']);
unset($this->session->data['voucher']);unset($this->session->data['vouchers']);unset($this->session->data['original_customer_id']);$this->load->model('setting/setting');$settings = $this->model_setting_setting->getSetting('config', $this->request->post['store_id']);
$order_id = (int)$this->request->get['order_id'];if ($this->request->post['customer_id']) {if ($this->config->get('orderpro_virtual_customer')) {if ($this->request->post['virtual_customer_id']) {
$this->load->model('account/customer');$customer_info = $this->model_account_customer->getCustomer($this->request->post['virtual_customer_id']);
if ($customer_info) {$this->customer->login($customer_info['email'], '', true);}$this->session->data['original_customer_id'] = $this->request->post['customer_id'];
}} else {$this->load->model('account/customer');$customer_info = $this->model_account_customer->getCustomer($this->request->post['customer_id']);if ($customer_info) {$this->customer->login($customer_info['email'], '', true);}}
}$this->cart->clear();$this->currency->set($this->request->post['currency_code']);$json['del_product_rows'] = array();$ppt_keys = array();$ppt_rows = array();
$ppt_discounts = array();$dpts = array();if (isset($this->request->post['order_product'])) {foreach ($this->request->post['order_product'] as $ppt_key => $oop) {
if (($oop['product_id'] > 0) && ($oop['quantity'] > 0)) {if ($oop['status'] != '1') {$this->db->query("UPDATE `" . DB_PREFIX . "product` SET `status` = '1' WHERE `product_id` = '" . (int)$oop['product_id'] . "'");$dpts[] = array(
'product_id' => $oop['product_id']);}if(!isset($oop['option'])) {$oop['option'] = array();}$flat = array();$this->flatten_array($oop['option'], $flat);if (!in_array($oop['product_id'] . implode(',', $flat), $ppt_keys)) {$ppt_keys[] = $oop['product_id'] . implode(',', $flat);
$ppt_discounts[] = array('amount' => $oop['discount_amount'],'type'   => $oop['discount_type']);$ppt_rows[] = $ppt_key;} else {$json['del_product_rows'][] = $ppt_key;}$profile_id = '';
$this->cart->add($oop['product_id'], $oop['quantity'], $oop['option'], $profile_id, $oop['price']);} else {$json['del_product_rows'][] = $ppt_key;}}}if ($this->cart->hasShipping()) {$this->tax->setShippingAddress($this->request->post['shipping_country_id'], $this->request->post['shipping_zone_id']);
} else {$this->tax->setShippingAddress($this->config->get('config_country_id'), $this->config->get('config_zone_id'));}$this->tax->setPaymentAddress($this->request->post['payment_country_id'], $this->request->post['payment_zone_id']);
$this->tax->setStoreAddress($this->config->get('config_country_id'), $this->config->get('config_zone_id'));	$this->load->model('setting/extension');$this->load->model('localisation/country');$this->load->model('localisation/zone');$json['shipping_methods'] = array();if ($this->cart->hasShipping()) {if ($this->request->post['shipping_method'] == 'pickup') {$country_info = $this->model_localisation_country->getCountry($this->request->post['payment_country_id']);
} else {$country_info = $this->model_localisation_country->getCountry($this->request->post['shipping_country_id']);}if ($country_info) {$country = $country_info['name'];
$iso_code_2 = $country_info['iso_code_2'];$iso_code_3 = $country_info['iso_code_3'];$address_format = $country_info['address_format'];} else {$country = '';$iso_code_2 = '';$iso_code_3 = '';	$address_format = '';}if ($this->request->post['shipping_method'] == 'pickup') {$zone_info = $this->model_localisation_zone->getZone($this->request->post['payment_zone_id']);} else {$zone_info = $this->model_localisation_zone->getZone($this->request->post['shipping_zone_id']);
}if ($zone_info) {$zone = $zone_info['name'];$code = $zone_info['code'];} else {$zone = '';$code = '';}if ($this->request->post['shipping_method'] == 'pickup') {$saddress_data = array('firstname' => $this->request->post['payment_firstname'],'lastname' => $this->request->post['payment_lastname'],
'company'  => $this->request->post['payment_company'],'address_1' => $this->request->post['payment_address_1'],'address_2' => $this->request->post['payment_address_2'],'postcode' => $this->request->post['payment_postcode'],'city' => $this->request->post['payment_city'],'zone_id'  => $this->request->post['payment_zone_id'],
'zone' => $zone,'zone_code' => $code,'country_id' => $this->request->post['payment_country_id'],'country'  => $country,	'iso_code_2'     => $iso_code_2,'iso_code_3' => $iso_code_3,'address_format' => $address_format);} else {$saddress_data = array('firstname' => $this->request->post['shipping_firstname'],
'lastname' => $this->request->post['shipping_lastname'],'company'  => $this->request->post['shipping_company'],'zone_id'  => $this->request->post['shipping_zone_id'],'zone' => $zone,'zone_code' => $code,'country_id'     => $this->request->post['shipping_country_id'],'country'  => $country,'iso_code_2'     => $iso_code_2,'iso_code_3'     => $iso_code_3,'address_format' => $address_format);
}$this->session->data['shipping_method'] = $this->request->post['shipping_method'];if ($this->config->get($this->request->post['shipping_method'] . '_status')) {$this->load->model('shipping/' . $this->request->post['shipping_method']);$quote = $this->{'model_shipping_' . $this->request->post['shipping_method']}->getQuote($saddress_data); 
if (!empty($quote)) {$current = current($quote['quote']);$ship_code = explode(".", $current['code']);$shipping_code = $ship_code[1];} else {if (isset($this->request->post['shipping']) && ($this->request->post['shipping'] == '1')) {$json['warning']['shipping2'] = $this->language->get('error_shipping_getquote');} else {
$json['error']['shipping2'] = $this->language->get('error_shipping_getquote');}}} else {if (isset($this->request->post['shipping']) && ($this->request->post['shipping'] == '1')) {$json['warning']['shipping'] = $this->language->get('error_shipping_nofound');
} else {$json['error']['shipping'] = $this->language->get('error_shipping_nofound');}}if (!empty($this->request->post['shipping_method']) && isset($quote) && !empty($quote)) {
$this->session->data['shipping_method'] = $quote['quote'][$shipping_code];$json['shipping_method'] = $this->request->post['shipping_method'];}} else {unset($this->session->data['guest']['shipping']);unset($this->session->data['shipping_address_id']);unset($this->session->data['shipping_method']);
unset($this->session->data['shipping_methods']);$json['shipping_method'] = $this->request->post['shipping_method'];	}$json['order_product'] = array();$taxes = array();$sub_total = 0;$row = 0;$points = 0;foreach ($this->cart->getProducts() as $ppt) {if (empty($ppt_discounts[$row]['amount'])) {$pto = $ppt['total'];$text_discount = '';} else {switch ($ppt_discounts[$row]['type']) {case "P":$discount_amount = ($ppt['total'] / 100) * (float)$ppt_discounts[$row]['amount'];
$pto = $ppt['total'] - $discount_amount;$text_discount = $ppt_discounts[$row]['amount'] . '% ( -' . $this->currency->format($discount_amount) . ' )';
break;case "S":$discount_amount = ((float)$ppt_discounts[$row]['amount'] * $ppt['quantity']);$pto = $ppt['total'] - $discount_amount;$text_discount = ' ( -' . $this->currency->format($discount_amount) . ' )';
break;}}if ($ppt['tax_class_id']) {$tax_rates = $this->tax->getRates($pto, $ppt['tax_class_id']);foreach ($tax_rates as $tax_rate) {
if (!isset($taxes[$tax_rate['tax_rate_id']])) {$taxes[$tax_rate['tax_rate_id']] = $tax_rate['amount'];} else {$taxes[$tax_rate['tax_rate_id']] += $tax_rate['amount'];
}}}$json['order_product'][$ppt_rows[$row]] = array('name'     => strip_tags(html_entity_decode($ppt['name'], ENT_QUOTES, 'UTF-8')),'model'    => strip_tags(html_entity_decode($ppt['model'], ENT_QUOTES, 'UTF-8')),'sku' => strip_tags(html_entity_decode($ppt['sku'], ENT_QUOTES, 'UTF-8')),
'quantity' => $ppt['quantity'],'price'    => number_format($ppt['price'], 2, '.', ''),'total'    => number_format($pto, 2, '.', ''),
'tax' => $this->tax->getTax($pto, $ppt['tax_class_id']),'reward'   => $ppt['reward'],'discount' => $text_discount);$sub_total += $pto;
$points += $ppt['points'];$row++;}$this->session->data['payment_method']['code'] = $this->request->post['payment_method'];if (!empty($this->request->post['coupon_id'])) {$this->load->model('checkout/coupon');																																												$coupon_data = $this->model_checkout_coupon->getCoupon($this->request->post['coupon_id']);
if ($coupon_data && !empty($coupon_data)) {$coupon_id = $coupon_data['coupon_id'];$this->session->data['coupon'] = $this->request->post['coupon_id'];} else {
$coupon_id = false;$this->session->data['coupon'] = '';$json['warning']['coupon'] = $this->language->get('error_coupon_use');}} else {$this->session->data['coupon'] = '';
$coupon_id = false;}if (!empty($this->request->post['voucher_id'])) {$this->load->model('checkout/voucher');$this->db->query("DELETE FROM " . DB_PREFIX . "voucher_history WHERE order_id = '" . $order_id . "'");
$voucher_info = $this->model_checkout_voucher->getVoucher($this->request->post['voucher_id']);if ($voucher_info && !empty($voucher_info)) {$voucher_id = $voucher_info['voucher_id'];																																																$this->session->data['voucher'] = $this->request->post['voucher_id'];
} else {$voucher_id = false;$this->session->data['voucher'] = '';$json['warning']['voucher'] = $this->language->get('error_voucher_use');}} else {$this->db->query("DELETE FROM " . DB_PREFIX . "voucher_history WHERE order_id = '" . $order_id . "'");
$this->session->data['voucher'] = '';$voucher_id = false;}$json['order_total'] = array();$tt = 0;if (!empty($this->request->post['reward_use'])) {$crr = $this->customer->getRewardPointsCustomerId($this->request->post['customer_id']);
$order_use_reward = $this->db->query("SELECT SUM(points) AS total FROM " . DB_PREFIX . "customer_reward WHERE order_id = '" . (int)$this->request->get['order_id'] . "' AND points < '0'");
if ($order_use_reward->num_rows) {$crr = $crr + abs($order_use_reward->row['total']);}$order_recived_reward = $this->db->query("SELECT SUM(points) AS total FROM " . DB_PREFIX . "customer_reward WHERE order_id = '" . (int)$this->request->get['order_id'] . "' AND points > '0'");
if ($order_recived_reward->num_rows) {$crr = $crr - abs($order_recived_reward->row['total']);}if ($this->request->post['reward_use'] > $crr) {$json['warning']['warning_reward'] = sprintf($this->language->get('error_reward_usemax'), $crr);} else {$this->deleteApprovedReward($order_id);$this->session->data['reward'] = (int)$this->request->post['reward_use'];}
} else {$this->deleteApprovedReward($order_id);}$sort_order = array(); $json['correct'] = '';$tax_class_id = '';$correct_tax = array();if (isset($this->request->post['order_total'])) {foreach ($this->request->post['order_total'] as $val) {if (isset($val['tax_class_id'])) {$tax_class_id = $val['tax_class_id'];
} elseif (count($correct_split = explode(',', $val['code'])) > 1) {$correct_split = explode(',', $val['code']);$val['code'] = $correct_split[0];$tax_class_id = $correct_split[1];}switch ($val['code']) {case 'total':break;case 'discount':if ($val['value'] <= 0) {$val['value'] = 0;}$discount = $val['value'];$discount_sort_order = $val['sort_order'];$val['text'] = $this->currency->format($val['value']);
$json['order_total'][] = $val;break;case 'correct':$val['value'] = (int)$val['value'];if (!empty($tax_class_id)) {$correct_tax = $this->tax->getRates($val['value'], $tax_class_id);
foreach ($correct_tax as $tax_rate) {if (!isset($taxes[$tax_rate['tax_rate_id']])) {$taxes[$tax_rate['tax_rate_id']] = $tax_rate['amount'];} else {$taxes[$tax_rate['tax_rate_id']] += $tax_rate['amount'];}}}$tt += $val['value'];if(empty($tax_class_id)) {$tt_sort_order = $this->config->get('tax_sort_order') + 1;} else {$tt_sort_order = $this->config->get('tax_sort_order') - 1;
}$json['order_total'][] = array('code' => 'correct,' . $tax_class_id,'correct' => '1','title' => $val['title'],'text' => $this->currency->format($val['value']),
'value' => $val['value'],'sort_order'   => $tt_sort_order);break;}}}$results = $this->model_setting_extension->getExtensions('total');
foreach ($results as $key => $value) {$sort_order[$key] = $this->config->get($value['code'] . '_sort_order');}array_multisort($sort_order, SORT_ASC, $results);foreach ($results as $result) {if ($this->config->get($result['code'] . '_status')) {
if (isset($discount) && $this->config->get($result['code'] . '_sort_order') > $discount_sort_order) {$tax_total = '';foreach ($taxes as $tax) {$tax_total += $tax;}$sub = $tt;
if (!empty($discount) && !empty($sub)) {$divider = $sub / 100;$multiplier = $discount / $divider;$tt = $sub - $discount;foreach ($taxes as $key => $tax) {$taxes[$key] -= ($tax / 100) * $multiplier;}}unset($discount);}
$this->load->model('total/' . $result['code']);if (!isset($this->request->post[$result['code']]) || empty($this->request->post[$result['code']])) {
if ($result['code'] == 'sub_total') {$this->load->language('total/sub_total');$json['order_total'][] = array('code' => 'sub_total','title' => $this->language->get('text_sub_total'),'text' => $this->currency->format($sub_total),'value' => $sub_total,'sort_order' => $this->config->get('sub_total_sort_order')
);$tt += $sub_total;} else {$this->{'model_total_' . $result['code']}->getTotal($json['order_total'], $tt, $taxes);}
} else {foreach ($this->request->post['order_total'] as $val) {if ($val['code'] == $result['code']) {$val['text'] = $this->currency->format($val['value']);
$json['order_total'][] = $val;$tt += $val['value'];}}}}$sort_order = array(); $order_info['customer_id'] = $this->request->post['customer_id'];$order_info['order_id'] = $order_id;
foreach ($json['order_total'] as $key => $value) {$sort_order[$key] = $value['sort_order'];if ($value['code'] == 'coupon' && $result['code'] == 'coupon') {$this->db->query("DELETE FROM `" . DB_PREFIX . "coupon_history` WHERE `order_id` = '" . $order_id . "'");
if ($coupon_id) {$this->model_checkout_coupon->redeem($coupon_id, $order_id, $this->request->post['customer_id'], $value['value']);}}if ($value['code'] == 'voucher' && $result['code'] == 'voucher') {$this->db->query("DELETE FROM `" . DB_PREFIX . "voucher_history` WHERE `order_id` = '" . $order_id . "'");
if ($voucher_id) {$this->model_checkout_voucher->redeem($voucher_id, $order_id, $value['value']);}}if ($value['code'] == 'reward' && $result['code'] == 'reward') {$this->load->model('total/reward');$this->model_total_reward->confirm($order_info, $value);}}
array_multisort($sort_order, SORT_ASC, $json['order_total']);}$json['payment_methods'] = array();$country_info = $this->model_localisation_country->getCountry($this->request->post['payment_country_id']);
if ($country_info) {$country = $country_info['name'];$iso_code_2 = $country_info['iso_code_2'];$iso_code_3 = $country_info['iso_code_3'];$address_format = $country_info['address_format'];
} else {$country = '';$iso_code_2 = '';$iso_code_3 = '';	$address_format = '';}$zone_info = $this->model_localisation_zone->getZone($this->request->post['payment_zone_id']);
if ($zone_info) {$zone = $zone_info['name'];$code = $zone_info['code'];} else {$zone = '';$code = '';}$paddress_data = array('firstname' => $this->request->post['payment_firstname'],'lastname' => $this->request->post['payment_lastname'],'company' => $this->request->post['payment_company'],
'address_1' => $this->request->post['payment_address_1'],'address_2' => $this->request->post['payment_address_2'],'postcode' => $this->request->post['payment_postcode'],
'city'     => $this->request->post['payment_city'],'zone_id'  => $this->request->post['payment_zone_id'],'zone'     => $zone,'zone_code' => $code,'country_id'     => $this->request->post['payment_country_id'],'country'  => $country,'iso_code_2'     => $iso_code_2,
'iso_code_3'     => $iso_code_3,'address_format' => $address_format);if ($this->config->get($this->request->post['payment_method'] . '_status')) {$this->load->model('payment/' . $this->request->post['payment_method']);
$payquote = $this->{'model_payment_' . $this->request->post['payment_method']}->getMethod($paddress_data, $tt);if (!empty($payquote)) {$pay_code = $payquote['code'];} else {$json['warning']['payment2'] = $this->language->get('error_payment_getmetod');}} else {$json['warning']['payment'] = $this->language->get('error_payment_nofound');
}$this->load->model('affiliate/affiliate');$this->load->model('localisation/currency');$ci = $this->model_localisation_currency->getCurrencyByCode($this->request->post['currency_code']);
if(!empty($this->request->post['affiliate_id'])) {$ai = $this->model_affiliate_affiliate->getAffiliate($this->request->post['affiliate_id']);
if (($ai) && ($this->request->post['affiliate'] == $ai['firstname'] . ' ' . $ai['lastname'])) {$json['commission']['value'] = ($sub_total / 100) * $ai['commission'];
$json['commission']['text'] = $this->currency->format($json['commission']['value'], $ci['code'], $ci['value']);} else {$json['commission'] = '0';
}}foreach ($dpts as $dpt) {$this->db->query("UPDATE `" . DB_PREFIX . "product` SET `status` = '0' WHERE `product_id` = '" . (int)$dpt['product_id'] . "'");
}$this->cart->clear();$this->customer->logout();unset($this->session->data['shipping_method']);unset($this->session->data['shipping_methods']);unset($this->session->data['payment_method']);unset($this->session->data['payment_methods']);unset($this->session->data['coupon']);unset($this->session->data['reward']);unset($this->session->data['voucher']);unset($this->session->data['vouchers']);unset($this->session->data['original_customer_id']);} else {$json['error']['warning'] = $this->language->get('error_permission');}
} else {$json['error']['warning'] = $this->language->get('error_license');}$this->response->setOutput(json_encode($json));	}private function deleteApprovedReward($order_id) {$this->db->query("DELETE FROM `" . DB_PREFIX . "customer_reward` WHERE `order_id` = '" . (int)$order_id . "' AND `points` < '0'");
}public function controlReward() {$json = array();$this->load->library('user');$this->user = new User($this->registry);if ($this->user->isLogged() && $this->user->hasPermission('modify', 'sale/orderpro')) {
$json['reward_total'] = '0';$json['reward_possibly'] = '0';$json['points'] = '0';$json['reward_cart'] = '0';if (isset($this->request->post['order_product'])) {foreach ($this->request->post['order_product'] as $ppt_key => $oop) {
$ppt_query = $this->db->query("SELECT points FROM `" . DB_PREFIX . "product` WHERE `product_id` = '" . (int)$oop['product_id'] . "'");if ((isset($ppt_query->row['points'])) && ($ppt_query->row['points'] > 0)) {$points = $ppt_query->row['points'];} else {$points = 0;}$query_reward = $this->db->query("SELECT points FROM `" . DB_PREFIX . "product_reward` WHERE `product_id` = '" . (int)$oop['product_id'] . "' AND `customer_group_id` = '" . (int)$this->request->get['customer_group_id'] . "'");
if (($query_reward->num_rows) && ($query_reward->row['points'] > 0)) {$json['reward_cart'] += $query_reward->row['points'] * (int)$oop['quantity'];
}if (isset($oop['option'])) {foreach ($oop['option'] as $ppt_option_id => $ppt_option_value_id) {$option_query = $this->db->query("SELECT points, points_prefix FROM `" . DB_PREFIX . "product_option_value` WHERE `product_option_value_id` = '" . (int)$ppt_option_value_id . "' AND `product_option_id` = '" . (int)$ppt_option_id . "' AND `product_id` = '" . (int)$oop['product_id'] . "'");
if ($option_query->num_rows) {if ($option_query->row['points_prefix'] == '+') {$points += $option_query->row['points'];
} elseif ($option_query->row['points_prefix'] == '-') {$points -= $option_query->row['points'];}}}}$json['points'] += $points * (int)$oop['quantity'];
}}$query = $this->db->query("SELECT SUM(points) AS total FROM `" . DB_PREFIX . "customer_reward` WHERE `customer_id` = '" . (int)$this->request->get['customer_id'] . "'");
if (($query->num_rows) && ($query->row['total'] > 0)) {$json['reward_total'] = $query->row['total'];}if (isset($this->request->get['order_id'])) {$order_use_reward = $this->db->query("SELECT SUM(points) AS total FROM `" . DB_PREFIX . "customer_reward` WHERE `order_id` = '" . (int)$this->request->get['order_id'] . "' AND `points` < '0'");
if ($order_use_reward->num_rows) {$json['reward_total'] = $json['reward_total'] + abs($order_use_reward->row['total']);}$order_recived_reward = $this->db->query("SELECT SUM(points) AS total FROM `" . DB_PREFIX . "customer_reward` WHERE `order_id` = '" . (int)$this->request->get['order_id'] . "' AND `points` > '0'");
if ($order_recived_reward->num_rows) {$json['reward_possibly'] = $json['reward_total'] - abs($order_recived_reward->row['total']);} else {$json['reward_possibly'] = $json['reward_total'];}if ($json['reward_possibly'] < 0) {$json['reward_possibly'] = '0';
}}} else {$json['error'] = $this->language->get('error_permission');}$this->response->setOutput(json_encode($json));}public function checkLicense() {return true;}private function flatten_array($array,&$flat) {
foreach ($array as $key => $value) {if (is_array($value)) {$this->flatten_array($value,$flat);} else {$flat[] = $value;}}return $flat;}}?>